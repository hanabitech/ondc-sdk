version: "2"

services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db

  ondc-cron-jobs:
    build:
      context: ondc-cron-jobs
      dockerfile: Dockerfile
    environment:
      X_API_KEY: ${X_API_KEY}
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
    depends_on:
      - mongo
      - py-ondc-protocol
      - py-protocol-consumer

  # mmi-client:
  #   image: navdeep710/ondc-ancillary-services:v3
  #   container_name: map-client
  #   environment:
  #     ENV: prod
  #     MMI_CLIENT_ID: ${MMI_CLIENT_ID}
  #     MMI_CLIENT_SECRET: ${MMI_CLIENT_SECRET}
  #     MMI_ADVANCE_API_KEY: ${MMI_ADVANCE_API_KEY}
  #     KNOWLARITY_NUMBER: ${KNOWLARITY_NUMBER}
  #     KNOWLARITY_AGENT_NUMBER: ${KNOWLARITY_AGENT_NUMBER}
  #     KNOWLARITY_API_KEY: ${KNOWLARITY_API_KEY}
  #     KNOWLARITY_AUTHORIZATION_HEADER_KEY: ${KNOWLARITY_AUTHORIZATION_HEADER_KEY}
  #   ports:
  #     - 8000:8000
  #   expose:
  #     - 8000

  # nginx:
  #   build:
  #     context: biap-app-ui-front
  #     dockerfile: Dockerfile
  #     args:
  #       REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
  #       REACT_APP_MMI_BASE_URL: ${REACT_APP_MMI_BASE_URL}
  #       REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
  #       REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
  #       REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
  #       REACT_APP_JUSTPAY_CLIENT_AND_MERCHANT_KEY: ${REACT_APP_JUSTPAY_CLIENT_AND_MERCHANT_KEY}
  #       REACT_APP_MERCHANT_KEY_ID: ${REACT_APP_MERCHANT_KEY_ID}
  #       REACT_APP_PAYMENT_SDK_ENV: ${REACT_APP_PAYMENT_SDK_ENV}
  #       REACT_APP_PAYMENT_SERVICE_URL: ${REACT_APP_PAYMENT_SERVICE_URL}
  #       REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
  #   container_name: biap-app-ui-front
  #   #    depends_on:
  #   #      - biap-bap-client
  #   environment:
  #     REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
  #     REACT_APP_MMI_BASE_URL: ${REACT_APP_MMI_BASE_URL}
  #     REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
  #     REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
  #     REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
  #   depends_on:
  #     - mmi-client
  #     - biap-client-node-js
  #   expose:
  #     - 80
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot

  # certbot:
  #   image: certbot/certbot
  #   restart: "always"
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  biap-client-node-js:
    restart: "always"
    build:
      context: biap-client-node-js
      args:
        JUSPAY_SECRET_KEY_PATH: ${JUSPAY_SECRET_KEY_PATH}
        JUSPAY_BASE_URL: ${JUSPAY_BASE_URL}
        JUSPAY_MERCHANT_ID: ${JUSPAY_MERCHANT_ID}
        JUSPAY_API_KEY: ${JUSPAY_API_KEY}
        FIREBASE_ADMIN_SERVICE_ACCOUNT: ${FIREBASE_ADMIN_SERVICE_ACCOUNT}
        ONDC_BASE_API_URL: ${ONDC_BASE_API_URL}
        JUSPAY_WEBHOOK_USERNAME: ${JUSPAY_WEBHOOK_USERNAME}
        JUSPAY_WEBHOOK_PASSWORD: ${JUSPAY_WEBHOOK_PASSWORD}
        DOMAIN: ${DOMAIN}
        CITY: ${CITY}
        COUNTRY: ${COUNTRY}
        BAP_ID: ${BAP_ID}
        BAP_URL: ${BAP_URL}
        PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
        DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
        BAP_PRIVATE_KEY: ${BAP_PRIVATE_KEY}
        BAP_PUBLIC_KEY: ${BAP_PUBLIC_KEY}
        BAP_UNIQUE_KEY_ID: ${BAP_UNIQUE_KEY_ID}
        PORT: 3939
        NODE_DEV: dev
        REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
        ENV_TYPE: ${ENV_TYPE}
        BAP_FINDER_FEE_TYPE: ${BAP_FINDER_FEE_TYPE}
        BAP_FINDER_FEE_AMOUNT: ${BAP_FINDER_FEE_AMOUNT}
        SSE_TIMEOUT: ${SSE_TIMEOUT}
    ports:
      - "3939:3939"
    expose:
      - 3939
    depends_on:
      - mongo

  biap-igm-node-js:
    build:
      context: biap-igm-node-js
    environment:
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      SSE_TIMEOUT: ${SSE_TIMEOUT}
      DOMAIN: ${DOMAIN}
      COUNTRY: ${COUNTRY}
      BAP_ID: ${BAP_ID}
      EXPECTED_RESPONSE_TIME: ${EXPECTED_RESPONSE_TIME}
      EXPECTED_RESOLUTION_TIME: ${EXPECTED_RESOLUTION_TIME}
      BUGZILLA_API_KEY: ${BUGZILLA_API_KEY}
      BUGZILLA_SERVICE_URI: ${BUGZILLA_SERVICE_URI}
      BAP_URL: ${BAP_URL}
      VOLUME_IMAGES_BASE_URL: ${VOLUME_IMAGES_BASE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      SELECTED_ISSUE_CRM: ${SELECTED_ISSUE_CRM}
      FIREBASE_ADMIN_SERVICE_ACCOUNT: ${FIREBASE_ADMIN_SERVICE_ACCOUNT}
    container_name: biap-igm-node-js
    ports:
      - "8989:6969"
    expose:
      - 8989
    depends_on:
      - mongo
    volumes:
      - "./images:/app/images"
    restart: always

  py-ondc-protocol:
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    build:
      context: py-ondc-protocol/webserver
      dockerfile: Dockerfile
    container_name: py-ondc-protocol
    environment:
      DOMAIN: ${DOMAIN}
      ENV: ${PROTOCOL_ENV}
      REGISTRY_BASE_URL: ${REGISTRY_BASE_URL}
      MONGO_DATABASE_HOST: ${MONGO_DATABASE_HOST}
      BAP_URL: ${BAP_URL}
      CLIENT_WEBHOOK_ENDPOINT: ${CLIENT_WEBHOOK_ENDPOINT}
      IGM_WEBHOOK_ENDPOINT: ${IGM_WEBHOOK_ENDPOINT}
      BAP_PRIVATE_KEY: ${BAP_PRIVATE_KEY}
      BAP_UNIQUE_KEY_ID: ${BAP_UNIQUE_KEY_ID}
      BAP_PUBLIC_KEY: ${BAP_PUBLIC_KEY}
      BAP_ID: ${BAP_ID}
      MONGO_DATABASE_URL: ${DB_CONNECTION_STRING}
      VERIFICATION_ENABLE: ${VERIFICATION_ENABLE}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      FLASK_SERVER: "True"
      QUEUE_ENABLE: "True"
      EXPECTED_RESPONSE_TIME: ${EXPECTED_RESPONSE_TIME}
      TTL_IN_SECONDS: ${TTL_IN_SECONDS}
    ports:
      - 5555:5555
    expose:
      - 5555

  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672

  py-protocol-consumer:
    build:
      context: py-ondc-protocol/webserver
      dockerfile: dockerfile-consumer
    container_name: bap-protocol-consumer
    depends_on:
      - rabbitmq
      - mongo
    environment:
      ENV: ${PROTOCOL_ENV}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      BAP_PRIVATE_KEY: ${BAP_PRIVATE_KEY}
      BAP_UNIQUE_KEY_ID: ${BAP_UNIQUE_KEY_ID}
      BAP_PUBLIC_KEY: ${BAP_PUBLIC_KEY}
      MONGO_DATABASE_URL: ${DB_CONNECTION_STRING}
      BAP_ID: ${BAP_ID}
      FLASK_SERVER: "False"

  bugzilla-node-backend:
    container_name: bugzilla-node-dev
    build:
      context: biap-bugzilla-service
      dockerfile: Dockerfile.production
    environment:
      ENV: prod
      BUGZILLA_API_KEY: ${BUGZILLA_API_KEY}
      BUGZILLA_BASE_URI: ${BUGZILLA_BASE_URI}
      BUGZILLA_ADMIN_EMAIL: ${BUGZILLA_ADMIN_EMAIL}
      LOG_LEVEL: ${LOG_LEVEL}
      SELECTED_ISSUE_CRM: ${SELECTED_ISSUE_CRM}
      TRUDESK_USERNAME: ${TRUDESK_USERNAME}
      TRUDESK_PASSWORD: ${TRUDESK_PASSWORD}
      TRUDESK_BASE_URI: ${TRUDESK_BASE_URI}
    ports:
      - "8001:8001"
    expose:
      - 8001
    restart: always

  trudesk-dev-service:
    image: polonel/trudesk:1
    restart: always
    ports:
      - "8118:8118"
    dns:
      - "1.1.1.1"
      - "8.8.8.8"
    environment:
      NODE_ENV: production
      TRUDESK_DOCKER: "true"
      TD_MONGODB_SERVER: mongo
      TD_MONGODB_DATABASE: trudesk
      USE_XFORWARDIP: "true"
    volumes:
      - trudesk_uploads:/usr/src/trudesk/public/uploads
      - trudesk_backups:/usr/src/trudesk/backups

  elasticsearch:
    image: elasticsearch:8.0.0
    restart: always
    environment:
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=true
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data

volumes:
  trudesk_uploads:
  trudesk_backups:
  mongo-data:
  elasticsearch:
